// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  // Round         Round?         @relation(fields: [roundId], references: [id])
  Team                 Team?                  @relation(fields: [teamId], references: [id])
  teamId               String?
  UsersOnTasks         UsersOnTasks[]
  Comment              Comment[]
  first_login          Boolean                @default(true)
  UsersOnOrganisations UsersOnOrganisations[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organisation {
  id                   String                 @id @default(cuid())
  name                 String
  created_at           DateTime?
  updated_at           DateTime?
  team                 Team[]
  UsersOnOrganisations UsersOnOrganisations[]
}

model Team {
  id             String        @id @default(cuid())
  name           String?
  members        User[]
  projects       Project[]
  Organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  created_at     DateTime?
  updated_at     DateTime?
}

model Roadmap {
  id          String      @id @default(cuid())
  name        String
  description String?
  milestones  Project[]
  Milestone   Milestone[]
}

model Project {
  id          String      @id @default(cuid())
  name        String
  milestones  Milestone[]
  created_at  DateTime?
  deleted_at  DateTime?
  status      String
  tasks       Task[]
  description String?
  Roadmap     Roadmap?    @relation(fields: [roadmapId], references: [id])
  roadmapId   String?
  Team        Team?       @relation(fields: [teamId], references: [id])
  teamId      String?
}

model Milestone {
  id             String    @id @default(cuid())
  name           String?
  description    String?
  status         String?
  created_at     DateTime?
  estimated_time DateTime?
  Roadmap        Roadmap?  @relation(fields: [roadmapId], references: [id])
  roadmapId      String?
  Project        Project?  @relation(fields: [projectId], references: [id])
  projectId      String?
}

// additional suibdivision on projects
// categories are things like features/bugs/issues for software dev
// or albums/tracks for a band for example
model Category {
  id         String    @id @default(cuid())
  name       String
  created_at DateTime?
  updated_at DateTime?
  Task       Task[]
}

model Task {
  id             String         @id @default(cuid())
  name           String
  description    String?
  // rounds         Round?         @relation(fields: [roundId], references: [id])
  deleted_at     DateTime?
  status         String?
  created_at     DateTime?
  priority       String?
  comments       Comment[]
  // roundId        String?
  estimated_time DateTime?
  Project        Project?       @relation(fields: [projectId], references: [id])
  projectId      String?
  UsersOnTasks   UsersOnTasks[]
  categoryId     String?
  Category       Category?      @relation(fields: [categoryId], references: [id])
}

model Comment {
  id         String    @id @default(cuid())
  author     User      @relation(fields: [userId], references: [id])
  content    String
  userId     String
  created_at DateTime?
  updated_at DateTime?
  Task       Task?     @relation(fields: [taskId], references: [id])
  taskId     String?
}

// A session similar to a sprint
// where the tasks are collected
// put together with an ETA
// model Round {
//   id             String    @id @default(cuid())
//   name           String?
//   assigned_to    User[]
//   tasks          Task[]
//   starts_at      DateTime
//   status         String
//   estimated_time DateTime
//   milestoneId    String?
//   deleted_at     DateTime
//   created_at     DateTime?
// }

model Schedule {
  id         String    @id @default(cuid())
  name       String?
  starts_at  DateTime?
  ends_at    DateTime?
  userId     String
  created_at DateTime?
}

model UsersOnTasks {
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String // relation scalar field (used in the `@relation` attribute above)
  user       User     @relation(fields: [userId], references: [id])
  userId     String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  image      String?
  email      String?
  name       String?

  @@id([taskId, userId])
}

model UsersOnOrganisations {
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@id([userId, organisationId])
}
